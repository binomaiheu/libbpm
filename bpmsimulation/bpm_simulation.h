/*
  libbpm - BPM signal processing/simulation library
  Copyright (C) 2006-07 Bino Maiheu (bino@hep.ucl.ac.uk)
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA 
*/

/**
   @file
   @ingroup sim
   @brief   libbpm waveform simulation routines

   This header contains the definitions for the libbpm RF waveform
   simulation routines
*/

/** @addtogroup sim */
/** @{ */

#ifndef BPMSIM_H__
#define BPMSIM_H__

/* -----------------------------------------------------------------------------
// includes
// -------------------------------------------------------------------------- */
#include <math.h>
#include <bpm/bpm_defs.h>
#include <bpm/bpm_interface.h>
#include <bpm/bpm_wf.h>
#include <bpm/bpm_nr.h>
#include <bpm/bpm_dsp.h>

/* -----------------------------------------------------------------------------
// macro definitions
// -------------------------------------------------------------------------- */
#define K_SAMPLE 3.31
#define MODE_DECAY 1e-2
#define MODE_MAX_SAMPLES 131072
//#define NMAX_MODES 5

/* -----------------------------------------------------------------------------
// typedefs, enums and other declarations
// -------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif
/* -----------------------------------------------------------------------------
// function prototypes and declarations
// -------------------------------------------------------------------------- */


  /**
     Ambient temperature in K
  */
  EXTERN double ambient_temp;

  /**
     Set ambient temperature
  */
  EXTERN int set_temp( double TK );

  /**
     Current system time in s
  */
  EXTERN double system_time;

  /**
     Set system time
  */
  EXTERN int set_time( double ts );

  /**
     Calculates the multi-mode response of a cavity BPM
     defined using bpminterface structures
     for a beam containing both one or multiple bunches.
     @param bpm a pointer to the structure defining the bpm
     @param beam a pointer to the structure defining the beam
     @param rf a pointer to were to store the generated waveform
     @return BPM_SUCCES upon succes, BPM_FAILURE upon failure
  */
  EXTERN int generate_bpmsignal( bpmconf_t *bpm, bpmmode_t *mode, beamconf_t *beam, doublewf_t *rf );

  /**
     Adds the response of a single mode generated by one bunch
     to the waveform rf, starting at the first sample
     @param bpm a pointer to the structure defining the bpm
     @param mode a pointer to the structure defining a cavity mode
     @param bunch a pointer to the structure defining the current bunch
     @param rf a pointer the waveform the response will be added to
     @return BPM_SUCCES upon succes, BPM_FAILURE upon failure
  */
  EXTERN int add_mode_response( bpmconf_t *bpm, bpmmode_t *mode, bunchconf_t *bunch, doublewf_t *rf );

  /**
     Returns the complex amplitude of the mode response.
     The imaginary part is only used when the incline or tilt signal
     is calculated which has a 90 deg phase offset.
     @param bpm a pointer to the structure defining the bpm
     @param mode a pointer to the structure defining a cavity mode
     @param bunch a pointer to the structure defining the current bunch
     @return BPM_SUCCES upon succes, BPM_FAILURE upon failure
  */
  EXTERN complex_t get_mode_amplitude( bpmconf_t *bpm, bpmmode_t *mode, 
				       bunchconf_t *bunch );

  /**
     Rectifies the rf waveform ( from the reference cavity )
     to get a trigger pulse.
     @param rf input waveform
     @param sens diode sensitivity in mV/uW
     @param filt pointer to a filter to apply on the signal
     @param diode type of the diode (pos/neg/bipolar)
     @param dc_out rectified signal
     @return a pointer to the generated rectified waveform
  */
  EXTERN doublewf_t* generate_diodesignal( doublewf_t *rf, double sens,
                                   	   filter_t *filt, triggertype_t diode );

  /**
     Calculates the normalized complex mode response,
     the imaginary part is only used to store incline/tilt signals
     @param mode structure containing describing the mode and response buffer
     @return BPM_SUCCESS upon success or BPM_FAILURE upon failure
  */
  EXTERN int get_mode_response( bpmmode_t *mode);

/**
   Digitises the waveform using the sampling frequency
   and the number of samples set in the resulting waveform
   @param IF input waveform to digitse
   @param nbits bit resolution of the ADC
   @param range_min the minimum voltage and
   @param range_max the maximum voltage the ADC can process
   @param clock_jitter ADC clock jitter
   @param digi_noise rms digitiser noise in ADC channels
   @param ipmode interpolation mode for doublewf_getvalue()
   @param wf sampled waveform
   @return BPM_SUCCESS upon success, BPM_FAILURE upon failure
*/
  EXTERN int digitise( doublewf_t *IF, int nbits,
		       double range_min, double range_max,
		       double clock_jitter, double digi_noise,
		       unsigned int ipmode, intwf_t *wf );

#ifdef __cplusplus
}
#endif

#endif /* #ifndef BPMINTERFACE_H__ */
/** @} */
/* ================================ end of file ============================= */
